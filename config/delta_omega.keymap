#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    combos {
        compatible = "zmk,combos";

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <16 17>;
        };

        caps-word {
            bindings = <&caps_word>;
            key-positions = <11 12 13>;
        };

        lang {
            bindings = <&kp LC(SPACE)>;
            key-positions = <20 31>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
        };
    };

    macros {
        press_two_keys: lm {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>;

            label = "LM";
        };
    };

    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <100>;
            flavor = "tap-preferred";
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        QWERTY {
            bindings = <
&hml TAB Q     &kp W         &kp E        &kp R        &kp T        &kp Y        &kp U        &kp I        &kp O         &hmr SQT P
&hml LSHIFT A  &hml LCTRL S  &hml LGUI D  &hml LALT F  &kp G        &kp H        &hmr RALT J  &hmr LGUI K  &hmr LCTRL L  &hmr LSHIFT SEMICOLON
&kp Z          &kp X         &kp C        &kp V        &kp B        &kp N        &kp M        &kp COMMA    &kp DOT       &kp SLASH
                                          &mo 1        &lt 2 SPACE  &lt 3 ENTER  &mo 1
            >;

            label = "BASE";
        };

        Navigation {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &kp HOME        &kp UP_ARROW    &kp END              &kt PG_UP
&trans  &trans  &trans  &trans  &trans  &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT            &kp CAPS
&trans  &trans  &trans  &trans  &trans  &trans  &kp LA(LEFT)    &trans          &kp LA(RIGHT_ARROW)  &kt PAGE_DOWN
                        &trans  &trans  &trans  &trans
            >;

            label = "Navigation";
        };

        Digits {
            bindings = <
&kp PIPE                 &kp DOLLAR          &kp LEFT_BRACE              &kp RIGHT_BRACE                 &press_two_keys EQUAL GREATER_THAN  &kp PLUS   &kp N7        &kp N8        &kp N9        &hmr SLASH SEMICOLON
&hml LSHIFT EXCLAMATION  &hml LCTRL AT_SIGN  &hml LGUI LEFT_PARENTHESIS  &mt LALT RIGHT_PARENTHESIS      &kp BACKSLASH                       &kp EQUAL  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp KP_MULTIPLY
&kp AMPERSAND            &kp LCTRL           &mt LESS_THAN LEFT_BRACKET  &mt GREATER_THAN RIGHT_BRACKET  &kp GRAVE                           &kp MINUS  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PERIOD
                                                                         &trans                          &trans                              &kp N0     &trans
            >;

            label = "Digits";
        };

        System {
            bindings = <
&kp F1      &kp F2  &kp F3        &kp F4      &kp F5      &kp F6        &kp F7        &kp F8      &kp F9      &kp F10
&bt BT_CLR  &trans  &trans        &trans      &trans      &kp C_MUTE    &kp C_PP      &trans      &trans      &trans
&trans      &trans  &out OUT_TOG  &bt BT_PRV  &bt BT_NXT  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PREV  &kp C_NEXT  &trans
                                  &trans      &trans      &trans        &trans
            >;

            label = "System";
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
