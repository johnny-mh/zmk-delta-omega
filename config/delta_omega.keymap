#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        L_Shift {
            bindings = <&kp LSHFT>;
            key-positions = <13 12>;
        };

        R_Shift {
            bindings = <&kp RSHIFT>;
            key-positions = <16 17>;
        };

        L_Ctrl {
            bindings = <&kp LCTRL>;
            key-positions = <12 11>;
        };

        R_Ctrl {
            bindings = <&kp RCTRL>;
            key-positions = <17 18>;
        };

        L_Gui {
            bindings = <&kp LEFT_GUI>;
            key-positions = <10 11>;
            timeout-ms = <70>;
        };

        R_Gui {
            bindings = <&kp RGUI>;
            key-positions = <19 18>;
            timeout-ms = <70>;
        };

        L_Alt {
            bindings = <&kp LALT>;
            key-positions = <10 13>;
        };

        R_Alt {
            bindings = <&kp RALT>;
            key-positions = <16 19>;
        };

        L_Gui_Ctrl {
            bindings = <&kp LG(RCTRL)>;
            key-positions = <10 11 12>;
        };

        R_Gui_Ctrl {
            bindings = <&kp RG(RCTRL)>;
            key-positions = <19 18 17>;
        };

        L_Ctrl_Shift {
            bindings = <&kp LC(LSHIFT)>;
            key-positions = <11 12 13>;
        };

        R_Ctrl_Shift {
            bindings = <&kp RC(RSHIFT)>;
            key-positions = <18 17 16>;
        };

        L_Gui_Alt {
            bindings = <&kp LG(LALT)>;
            key-positions = <10 11 13>;
        };

        R_Gui_Alt {
            bindings = <&kp LG(LALT)>;
            key-positions = <16 19 18>;
        };

        L_Alt_Shift {
            bindings = <&kp LA(LSHIFT)>;
            key-positions = <10 13 12>;
        };

        R_Alt_Shift {
            bindings = <&kp RA(RSHIFT)>;
            key-positions = <19 17 16>;
        };

        L_Gui_Shift {
            bindings = <&kp LG(LSHIFT)>;
            key-positions = <10 12>;
        };

        R_Gui_Shift {
            bindings = <&kp RG(RSHIFT)>;
            key-positions = <19 17>;
        };

        L_Ctrl_Alt {
            bindings = <&kp LC(LALT)>;
            key-positions = <11 13>;
        };

        R_Ctrl_Alt {
            bindings = <&kp RC(RALT)>;
            key-positions = <18 16>;
        };

        L_Gui_Ctrl_Shift {
            bindings = <&kp LG(LC(LEFT_SHIFT))>;
            key-positions = <20 21 22>;
        };

        R_Gui_Ctrl_Shift {
            bindings = <&kp RC(RG(RSHIFT))>;
            key-positions = <29 28 27>;
        };

        L_Ctrl_Shift_Alt {
            bindings = <&kp LC(LS(LALT))>;
            key-positions = <21 22 23>;
        };

        R_Ctrl_Shift_Alt {
            bindings = <&kp RS(RC(RALT))>;
            key-positions = <28 27 26>;
        };

        L_Gui_Ctrl_Alt {
            bindings = <&kp LG(LC(LALT))>;
            key-positions = <20 21 23>;
        };

        R_Gui_Ctrl_Alt {
            bindings = <&kp RC(RG(RALT))>;
            key-positions = <29 28 26>;
        };

        L_Gui_Shift_Alt {
            bindings = <&kp LG(LS(LALT))>;
            key-positions = <20 22 23>;
        };

        R_Gui_Shift_Alt {
            bindings = <&kp RS(RG(RALT))>;
            key-positions = <29 27 26>;
        };

        L_All_Mod {
            bindings = <&kp LS(LA(LC(LGUI)))>;
            key-positions = <20 21 22 23>;
        };

        R_All_Mods {
            bindings = <&kp RS(RA(RC(RGUI)))>;
            key-positions = <26 27 29 28>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&kp Q  &kp W  &kp E  &kp R         &kp T        &kp Y        &kp U            &kp I      &kp O    &kp P
&kp A  &kp S  &kp D  &kp F         &kp G        &kp H        &kp J            &kp K      &kp L    &kp SEMI
&kp Z  &kp X  &kp C  &kp V         &kp B        &kp N        &kp M            &kp COMMA  &kp DOT  &kp SLASH
                     &lt 1 ESCAPE  &lt 2 SPACE  &lt 3 ENTER  &lt 4 BACKSPACE
            >;
        };

        NUM {
            bindings = <
&trans  &trans  &trans      &trans       &trans  &trans  &kp N7        &kp N8        &kp N9        &trans
&trans  &trans  &trans      &trans       &trans  &trans  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &trans
&trans  &trans  &kp K_COPY  &kp K_PASTE  &trans  &trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans
                            &trans       &trans  &kp N0  &trans
            >;
        };

        NAV {
            bindings = <
&trans  &trans  &trans  &trans   &trans  &trans    &kp HOME  &kp END       &trans     &trans
&trans  &trans  &trans  &kp TAB  &trans  &kp LEFT  &kp DOWN  &kp UP_ARROW  &kp RIGHT  &trans
&trans  &trans  &trans  &trans   &trans  &trans    &trans    &trans        &trans     &trans
                        &trans   &trans  &trans    &trans
            >;
        };

        layer_5 {
            bindings = <
&trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&bt BT_CLR  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                            &trans  &trans  &trans  &trans
            >;
        };

        SYM {
            bindings = <
&trans       &kp PLUS   &kp ASTRK  &kp LEFT_BRACE        &trans  &trans  &kp RIGHT_BRACE        &kp DOUBLE_QUOTES  &kp BACKSLASH  &trans
&kp CARET    &kp MINUS  &kp EQUAL  &kp LEFT_PARENTHESIS  &kp LT  &kp GT  &kp RIGHT_PARENTHESIS  &kp APOS           &kp PIPE       &kp DOLLAR
&kp PERCENT  &kp EXCL   &kp AMPS   &kp LEFT_BRACKET      &trans  &trans  &kp RIGHT_BRACKET      &kp GRAVE          &kp HASH       &kp AT
                                   &trans                &trans  &trans  &trans
            >;
        };

        NUM_ADJUST {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans   &kp F7  &kp F8  &kp F9  &trans
&trans  &trans  &trans  &trans  &trans  &trans   &kp F4  &kp F5  &kp F6  &kp F12
&trans  &trans  &trans  &trans  &trans  &trans   &kp F1  &kp F2  &kp F3  &kp F11
                        &trans  &trans  &kp F10  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        num_adjust {
            if-layers = <1 4>;
            then-layer = <5>;
        };
    };
};
